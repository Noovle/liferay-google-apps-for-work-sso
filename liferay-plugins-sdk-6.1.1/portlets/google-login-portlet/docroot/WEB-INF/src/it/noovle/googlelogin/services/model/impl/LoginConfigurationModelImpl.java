/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package it.noovle.googlelogin.services.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import it.noovle.googlelogin.services.model.LoginConfiguration;
import it.noovle.googlelogin.services.model.LoginConfigurationModel;
import it.noovle.googlelogin.services.model.LoginConfigurationSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the LoginConfiguration service. Represents a row in the &quot;google_login_LoginConfiguration&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link it.noovle.googlelogin.services.model.LoginConfigurationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LoginConfigurationImpl}.
 * </p>
 *
 * @author
 * @see LoginConfigurationImpl
 * @see it.noovle.googlelogin.services.model.LoginConfiguration
 * @see it.noovle.googlelogin.services.model.LoginConfigurationModel
 * @generated
 */
@JSON(strict = true)
public class LoginConfigurationModelImpl extends BaseModelImpl<LoginConfiguration>
	implements LoginConfigurationModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a login configuration model instance should use the {@link it.noovle.googlelogin.services.model.LoginConfiguration} interface instead.
	 */
	public static final String TABLE_NAME = "google_login_LoginConfiguration";
	public static final Object[][] TABLE_COLUMNS = {
			{ "companyId", Types.BIGINT },
			{ "clientId", Types.VARCHAR },
			{ "clientSecret", Types.VARCHAR },
			{ "createUserOnLogin", Types.BOOLEAN },
			{ "doRedirect", Types.BOOLEAN },
			{ "doRedirectAfter", Types.BIGINT },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "accessDeniendPage", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table google_login_LoginConfiguration (companyId LONG not null primary key,clientId VARCHAR(2000) null,clientSecret VARCHAR(2000) null,createUserOnLogin BOOLEAN,doRedirect BOOLEAN,doRedirectAfter LONG,modifiedDate DATE null,accessDeniendPage VARCHAR(1000) null)";
	public static final String TABLE_SQL_DROP = "drop table google_login_LoginConfiguration";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.it.noovle.googlelogin.services.model.LoginConfiguration"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.it.noovle.googlelogin.services.model.LoginConfiguration"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static LoginConfiguration toModel(LoginConfigurationSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		LoginConfiguration model = new LoginConfigurationImpl();

		model.setCompanyId(soapModel.getCompanyId());
		model.setClientId(soapModel.getClientId());
		model.setClientSecret(soapModel.getClientSecret());
		model.setCreateUserOnLogin(soapModel.getCreateUserOnLogin());
		model.setDoRedirect(soapModel.getDoRedirect());
		model.setDoRedirectAfter(soapModel.getDoRedirectAfter());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setAccessDeniendPage(soapModel.getAccessDeniendPage());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<LoginConfiguration> toModels(
		LoginConfigurationSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<LoginConfiguration> models = new ArrayList<LoginConfiguration>(soapModels.length);

		for (LoginConfigurationSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.it.noovle.googlelogin.services.model.LoginConfiguration"));

	public LoginConfigurationModelImpl() {
	}

	public long getPrimaryKey() {
		return _companyId;
	}

	public void setPrimaryKey(long primaryKey) {
		setCompanyId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_companyId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return LoginConfiguration.class;
	}

	public String getModelClassName() {
		return LoginConfiguration.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("companyId", getCompanyId());
		attributes.put("clientId", getClientId());
		attributes.put("clientSecret", getClientSecret());
		attributes.put("createUserOnLogin", getCreateUserOnLogin());
		attributes.put("doRedirect", getDoRedirect());
		attributes.put("doRedirectAfter", getDoRedirectAfter());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("accessDeniendPage", getAccessDeniendPage());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		String clientId = (String)attributes.get("clientId");

		if (clientId != null) {
			setClientId(clientId);
		}

		String clientSecret = (String)attributes.get("clientSecret");

		if (clientSecret != null) {
			setClientSecret(clientSecret);
		}

		Boolean createUserOnLogin = (Boolean)attributes.get("createUserOnLogin");

		if (createUserOnLogin != null) {
			setCreateUserOnLogin(createUserOnLogin);
		}

		Boolean doRedirect = (Boolean)attributes.get("doRedirect");

		if (doRedirect != null) {
			setDoRedirect(doRedirect);
		}

		Long doRedirectAfter = (Long)attributes.get("doRedirectAfter");

		if (doRedirectAfter != null) {
			setDoRedirectAfter(doRedirectAfter);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String accessDeniendPage = (String)attributes.get("accessDeniendPage");

		if (accessDeniendPage != null) {
			setAccessDeniendPage(accessDeniendPage);
		}
	}

	@JSON
	public long getCompanyId() {
		return _companyId;
	}

	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	public String getClientId() {
		if (_clientId == null) {
			return StringPool.BLANK;
		}
		else {
			return _clientId;
		}
	}

	public void setClientId(String clientId) {
		_clientId = clientId;
	}

	@JSON
	public String getClientSecret() {
		if (_clientSecret == null) {
			return StringPool.BLANK;
		}
		else {
			return _clientSecret;
		}
	}

	public void setClientSecret(String clientSecret) {
		_clientSecret = clientSecret;
	}

	@JSON
	public boolean getCreateUserOnLogin() {
		return _createUserOnLogin;
	}

	public boolean isCreateUserOnLogin() {
		return _createUserOnLogin;
	}

	public void setCreateUserOnLogin(boolean createUserOnLogin) {
		_createUserOnLogin = createUserOnLogin;
	}

	@JSON
	public boolean getDoRedirect() {
		return _doRedirect;
	}

	public boolean isDoRedirect() {
		return _doRedirect;
	}

	public void setDoRedirect(boolean doRedirect) {
		_doRedirect = doRedirect;
	}

	@JSON
	public long getDoRedirectAfter() {
		return _doRedirectAfter;
	}

	public void setDoRedirectAfter(long doRedirectAfter) {
		_doRedirectAfter = doRedirectAfter;
	}

	@JSON
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	public String getAccessDeniendPage() {
		if (_accessDeniendPage == null) {
			return StringPool.BLANK;
		}
		else {
			return _accessDeniendPage;
		}
	}

	public void setAccessDeniendPage(String accessDeniendPage) {
		_accessDeniendPage = accessDeniendPage;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			LoginConfiguration.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public LoginConfiguration toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (LoginConfiguration)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	public LoginConfiguration toUnescapedModel() {
		return (LoginConfiguration)this;
	}

	@Override
	public Object clone() {
		LoginConfigurationImpl loginConfigurationImpl = new LoginConfigurationImpl();

		loginConfigurationImpl.setCompanyId(getCompanyId());
		loginConfigurationImpl.setClientId(getClientId());
		loginConfigurationImpl.setClientSecret(getClientSecret());
		loginConfigurationImpl.setCreateUserOnLogin(getCreateUserOnLogin());
		loginConfigurationImpl.setDoRedirect(getDoRedirect());
		loginConfigurationImpl.setDoRedirectAfter(getDoRedirectAfter());
		loginConfigurationImpl.setModifiedDate(getModifiedDate());
		loginConfigurationImpl.setAccessDeniendPage(getAccessDeniendPage());

		loginConfigurationImpl.resetOriginalValues();

		return loginConfigurationImpl;
	}

	public int compareTo(LoginConfiguration loginConfiguration) {
		long primaryKey = loginConfiguration.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof LoginConfiguration)) {
			return false;
		}

		LoginConfiguration loginConfiguration = (LoginConfiguration)obj;

		long primaryKey = loginConfiguration.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<LoginConfiguration> toCacheModel() {
		LoginConfigurationCacheModel loginConfigurationCacheModel = new LoginConfigurationCacheModel();

		loginConfigurationCacheModel.companyId = getCompanyId();

		loginConfigurationCacheModel.clientId = getClientId();

		String clientId = loginConfigurationCacheModel.clientId;

		if ((clientId != null) && (clientId.length() == 0)) {
			loginConfigurationCacheModel.clientId = null;
		}

		loginConfigurationCacheModel.clientSecret = getClientSecret();

		String clientSecret = loginConfigurationCacheModel.clientSecret;

		if ((clientSecret != null) && (clientSecret.length() == 0)) {
			loginConfigurationCacheModel.clientSecret = null;
		}

		loginConfigurationCacheModel.createUserOnLogin = getCreateUserOnLogin();

		loginConfigurationCacheModel.doRedirect = getDoRedirect();

		loginConfigurationCacheModel.doRedirectAfter = getDoRedirectAfter();

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			loginConfigurationCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			loginConfigurationCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		loginConfigurationCacheModel.accessDeniendPage = getAccessDeniendPage();

		String accessDeniendPage = loginConfigurationCacheModel.accessDeniendPage;

		if ((accessDeniendPage != null) && (accessDeniendPage.length() == 0)) {
			loginConfigurationCacheModel.accessDeniendPage = null;
		}

		return loginConfigurationCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{companyId=");
		sb.append(getCompanyId());
		sb.append(", clientId=");
		sb.append(getClientId());
		sb.append(", clientSecret=");
		sb.append(getClientSecret());
		sb.append(", createUserOnLogin=");
		sb.append(getCreateUserOnLogin());
		sb.append(", doRedirect=");
		sb.append(getDoRedirect());
		sb.append(", doRedirectAfter=");
		sb.append(getDoRedirectAfter());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", accessDeniendPage=");
		sb.append(getAccessDeniendPage());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("it.noovle.googlelogin.services.model.LoginConfiguration");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>clientId</column-name><column-value><![CDATA[");
		sb.append(getClientId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>clientSecret</column-name><column-value><![CDATA[");
		sb.append(getClientSecret());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createUserOnLogin</column-name><column-value><![CDATA[");
		sb.append(getCreateUserOnLogin());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>doRedirect</column-name><column-value><![CDATA[");
		sb.append(getDoRedirect());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>doRedirectAfter</column-name><column-value><![CDATA[");
		sb.append(getDoRedirectAfter());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>accessDeniendPage</column-name><column-value><![CDATA[");
		sb.append(getAccessDeniendPage());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = LoginConfiguration.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			LoginConfiguration.class
		};
	private long _companyId;
	private String _clientId;
	private String _clientSecret;
	private boolean _createUserOnLogin;
	private boolean _doRedirect;
	private long _doRedirectAfter;
	private Date _modifiedDate;
	private String _accessDeniendPage;
	private LoginConfiguration _escapedModel;
}